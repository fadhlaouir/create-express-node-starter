{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Core API",
    "description": "Backend for any application documented with Swagger",
    "license": {
      "name": "MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    },
    "contact": {
      "name": "Raed Fadhlaoui",
      "url": "https://www.linkedin.com/in/fadhlaouiraed/",
      "email": "raed.fadhlaoui@hotmail.com"
    }
  },
  "host": "localhost:5000",
  "basePath": "/v1/api",
  "tags": [
    {
      "name": "Auth",
      "description": "API for authentification in the system"
    },
    {
      "name": "Account",
      "description": "API for user account in the system"
    },
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "Event/News",
      "description": "API for article in the system"
    }
  ],
  "schemes": ["http"],
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/auth/user-email": {
      "post": {
        "summary": "Check if we have the email exist in our Database or not",
        "tags": ["Auth"],
        "description": "Check if we have the email exist in our Database or not",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "email that we want to verify if we have in our database or not",
            "schema": {
              "$ref": "#/definitions/email"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "success: true"
          },
          "403": {
            "description": "Email existe déjà"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "Create new user",
        "tags": ["Auth"],
        "description": "Create new user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "UnauthorizedError": {
            "description": "Authentication information is missing or invalid"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Sigin with an existing user",
        "tags": ["Auth"],
        "description": "Login with an existing user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we already have in our databse",
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK (successfully authenticated)"
          },
          "UnauthorizedError": {
            "description": "Authentication information is missing or invalid"
          }
        }
      }
    },
    "/auth/forget-password": {
      "post": {
        "summary": "Send email to reset password",
        "tags": ["Auth"],
        "description": "Forget Password to send email",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we need to reset password",
            "schema": {
              "$ref": "#/definitions/forgetUserPassword"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK (Email Sent)"
          },
          "UnauthorizedError": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/reset-password/{token}": {
      "parameters": [
        {
          "name": "token",
          "in": "path",
          "required": true,
          "description": "token of user password that we want to find",
          "type": "string"
        }
      ],
      "post": {
        "summary": "Create new password",
        "tags": ["Auth"],
        "description": "Reset Password",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we need to reset password",
            "schema": {
              "$ref": "#/definitions/resetUserPassword"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK (Password Updated)"
          },
          "UnauthorizedError": {
            "description": "Password reset token is invalid or has expired"
          }
        }
      }
    },
    "/account/{id}/disable": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "put": {
        "summary": "Disable user account with given ID",
        "tags": ["Account"],
        "responses": {
          "200": {
            "description": "Account Disabled"
          }
        }
      }
    },
    "/account/{token}/enable": {
      "post": {
        "summary": "Enable user account with given email and password",
        "description": "Enable user account",
        "tags": ["Account"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we already have in our databse",
            "schema": {
              "$ref": "#/definitions/newUser"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK (successfully Activate account)"
          },
          "UnauthorizedError": {
            "description": "Authentication information is missing or invalid"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "Return Array of users",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Users"],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is updated",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user with given ID",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User is deleted"
          }
        }
      }
    },
    "/event": {
      "post": {
        "summary": "Create new event",
        "tags": ["Event/News"],
        "description": "Create new Event",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "Event that we want to create",
            "schema": {
              "$ref": "#/definitions/newEvent"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "New Event is created",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Event/News"],
        "summary": "Get all Events",
        "responses": {
          "200": {
            "description": "Return Array of Events",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    },
    "/events/{Id}": {
      "parameters": [
        {
          "name": "Id",
          "in": "path",
          "required": true,
          "description": "ID of article that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": ["Event/News"],
        "summary": "Get Event with given ID",
        "responses": {
          "200": {
            "description": "Event is found",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "403": {
            "description": "Event not found"
          }
        }
      },
      "put": {
        "summary": "Update Event with give ID",
        "tags": ["Event/News"],
        "parameters": [
          {
            "name": "Event",
            "in": "body",
            "description": "Event with new values of properties",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event is updated",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Event with given ID",
        "tags": ["Event/News"],
        "responses": {
          "200": {
            "description": "Event is deleted"
          }
        }
      }
    }
  },
  "definitions": {
    "email": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        }
      }
    },
    "newUser": {
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "forgetUserPassword": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        }
      }
    },
    "resetUserPassword": {
      "required": ["resetPasswordToken", "resetPasswordExpires"],
      "properties": {
        "resetPasswordToken": {
          "type": "string",
          "format": "password"
        },
        "resetPasswordExpires": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "User": {
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "fullName": {
          "type": "string"
        },
        "photo": {
          "type": "string"
        },
        "canHelpWith": {
          "type": "string"
        },
        "governorate": {
          "type": "string"
        },
        "municipality": {
          "type": "string"
        },
        "age": {
          "type": "Number"
        },
        "gender": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "whatsappNumber": {
          "type": "string"
        },
        "bloodType": {
          "type": "string"
        },
        "bloodHelpCount": {
          "type": "Number"
        },
        "materialHelpCount": {
          "type": "Number"
        },
        "is_volunteer": {
          "type": "boolean"
        },
        "is_doner": {
          "type": "boolean"
        },
        "is_active": {
          "type": "boolean"
        },
        "is_anonymous": {
          "type": "boolean"
        },
        "is_admin": {
          "type": "boolean"
        },
        "is_manager": {
          "type": "boolean"
        },
        "last_donation": {
          "type": "number",
          "format": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "$ref": "#/definitions/User"
    },
    "newEvent": {
      "properties": {
        "gallery": {
          "type": "array",
          "items": {}
        },
        "photo": {
          "type": "string"
        },
        "start_at": {
          "type": "string"
        },
        "end_at": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "isEvent": {
          "type": "boolean"
        },
        "event_name_ar": {
          "type": "string"
        },
        "description_ar": {
          "type": "string"
        },
        "event_location_ar": {
          "type": "string"
        },
        "event_name_fr": {
          "type": "string"
        },
        "description_fr": {
          "type": "string"
        },
        "event_location_fr": {
          "type": "string"
        },
        "coordinates": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            }
          }
        }
      }
    },
    "Event": {
      "properties": {
        "gallery": {
          "type": "array",
          "items": {}
        },
        "photo": {
          "type": "string"
        },
        "start_at": {
          "type": "string"
        },
        "end_at": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "isEvent": {
          "type": "boolean"
        },
        "ar": {
          "type": "object",
          "properties": {
            "event_name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "event_location": {
              "type": "string"
            }
          }
        },
        "fr": {
          "type": "object",
          "properties": {
            "event_name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "event_location": {
              "type": "string"
            }
          }
        },
        "coordinates": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            }
          }
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    }
  }
}
